rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /players/{Players} {
      allow read: if request.auth.uid == Players 
                    || getUserData().roles.hasAny(['admin']); 
      allow update, write: if request.auth.uid == Players && notUpdating('roles') && notUpdating('uid') && notUpdating('balance')
                    || getUserData().roles.hasAny(['admin']) && notUpdating('balance') && notUpdating('uid'); 
      allow delete: if getUserData().roles.hasAny(['admin']);
      allow create: if getUserData().roles.hasAny(['admin']) || request.auth.uid != null &&  valid_create();
    }

    match /tables/{tableId} {
      allow read: if getUserData().roles.hasAny(['player', 'viewer']);
    }

    function getUserData() {
      return get(/databases/$(database)/documents/players/$(request.auth.uid)).data
    }
    
    function valid_create() {
        return !(request.resource.data.keys().hasAny(['roles','balance']));
    }
    
    function notUpdating(field) {
      // prevent update of specific document data object - like roles 
      return !(field in request.resource.data) || resource.data[field] == request.resource.data[field]
    }

  }
}
